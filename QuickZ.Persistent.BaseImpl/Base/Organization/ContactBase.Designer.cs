//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using DevExpress.Xpo;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using DevExpress.ExpressApp.Utils;

using DevExpress.Persistent.Validation;
using DevExpress.Persistent.Base;
using DevExpress.ExpressApp.DC;
using System.Linq;
using DevExpress.Persistent.Base.General;
using EDS.RentalManager.Express.Module.BusinessObjects.Common;
using DevExpress.ExpressApp.ConditionalAppearance;
using EDS.RentalManager.Express.Module.BusinessObjects.Common.Base;

namespace EDS.RentalManager.Express.Module.BusinessObjects
{

    /// <summary>
    /// A person of interest to The Business
    /// </summary>
    //[RuleCombinationOfPropertiesIsUnique("Contact: Person must be unique", DefaultContexts.Save, "FirstName, LastName", ResultType = ValidationResultType.Error, SkipNullOrEmptyValues = false)]

    #region Business Rules (code-first)
    //[RuleIsReferenced("Contact: Used as a CustomerContact and cannot be deleted", 
    //    DefaultContexts.Delete, 
    //    typeof(SaleProcessBase), 
    //    "CustomerContact", 
    //    InvertResult = true,
    //    CriteriaEvaluationBehavior = CriteriaEvaluationBehavior.InTransaction,
    //    MessageTemplateMustBeReferenced = "This Contact has one or more ProcessBases and cannot be deleted")]

    //[RuleIsReferenced("Contact: Used as a ProjectContact and cannot be deleted", 
    //    DefaultContexts.Delete, 
    //    typeof(SaleProcessBase), 
    //    "ProjectContact", 
    //    InvertResult = true,
    //    CriteriaEvaluationBehavior = CriteriaEvaluationBehavior.InTransaction,
    //    MessageTemplateMustBeReferenced = "This Contact has one or more ProcessBases and cannot be deleted")]

    //[RuleIsReferenced("Contact: Used as a FulfilmentContact and cannot be deleted",
    //    DefaultContexts.Delete, 
    //    typeof(SaleProcessBase), 
    //    "FulfilmentContact", 
    //    InvertResult = true,
    //    CriteriaEvaluationBehavior = CriteriaEvaluationBehavior.InTransaction,
    //    MessageTemplateMustBeReferenced = "This Contact has one or more ProcessBases and cannot be deleted")]

    //[RuleIsReferenced("Contact: Used as an EmailRecipient and cannot be deleted", 
    //    DefaultContexts.Delete, 
    //    typeof(ProcessEmailing), 
    //    "Recipient",
    //    InvertResult = true,
    //    CriteriaEvaluationBehavior = CriteriaEvaluationBehavior.InTransaction,
    //    MessageTemplateMustBeReferenced = "This Contact has one or more ProcessBases and cannot be deleted")]

    //[RuleCriteria("Contact: has ContactCommunications and cannot be deleted", DefaultContexts.Delete, "ContactCommunications.Count = 0")]

    //[RuleCriteria("Contact: used by a BusinessStructureBase cannot be deleted", DefaultContexts.Delete, "BusinessStructureBases.Count = 0")]

    //[RuleCriteria("Contact: with a ResourceRole cannot be deleted", DefaultContexts.Delete, "ResourceRoles.Count = 0")]
    #endregion

    [NavigationItem(false)]
    [CreatableItem(false)]
    [DevExpress.ExpressApp.DC.XafDefaultProperty(nameof(FullName))]
    [Persistent("Contact")]
    //[ImageName("BOContact")]
    public abstract partial class ContactBase : RMXSequenceDocumentBase
    {

        string fFirstName;
        [ImmediatePostData]
        public string FirstName {
            get => fFirstName;
            set { SetPropertyValue<string>(nameof(FirstName), ref fFirstName, value);
                fullName = $"{FirstName} {LastName}";
                OnChanged(nameof(FullName));
            }
        }
        string fLastName;
        [ImmediatePostData]
        public string LastName {
            get => fLastName;
            set { SetPropertyValue<string>(nameof(LastName), ref fLastName, value);
                fullName = $"{FirstName} {LastName}";
                OnChanged(nameof(FullName));
            }
        }
        string fCompanyName;
        [DevExpress.Xpo.DisplayName(@"Company")]
        public string CompanyName {
            get => fCompanyName;
            set => SetPropertyValue<string>(nameof(CompanyName), ref fCompanyName, value);
        }
        DateTime? fBirthDate;
        public DateTime? BirthDate {
            get => fBirthDate;
            set => SetPropertyValue<DateTime?>(nameof(BirthDate), ref fBirthDate, value);
        }
        string fSSN;
        public string SSN {
            get => fSSN;
            set => SetPropertyValue<string>(nameof(SSN), ref fSSN, value);
        }
        [PersistentAlias("Iif([BirthDate] Is Null, '', DateDiffYear(Now(), [BirthDate]) * -1 + ' years old')")]
        public string Age  => (string)(EvaluateAlias(nameof(Age)));

        //[PersistentAlias("[FirstName] + ' ' + [LastName]")]
        //public string FullName => $"{FirstName} {LastName}";

        //if (String.IsNullOrEmpty(FirstName) || String.IsNullOrEmpty(LastName))
        //    return "";
        //return (string)(EvaluateAlias("FullName")); 
        // string name;
        [Browsable(false)]
        [ImmediatePostData]
        public string Name {
            get => FullName;
            set => FullName = value;
        }
        string fullName;
        [ImmediatePostData]
        //[NonPersistent]
        public string FullName {
            get => String.IsNullOrEmpty(fullName) ? fullName = $"{FirstName} {LastName}" : fullName;
            set => SetPropertyValue(nameof(FullName), ref fullName, value);
        }
    }


}
