//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using DevExpress.Xpo;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;

using DevExpress.Persistent.Base;
using DevExpress.Persistent.Validation;
using System.IO;
using DevExpress.ExpressApp.Utils;
using QuickZ.Persistent.Base.Documents;
using DevExpress.Persistent.BaseImpl;
using EDS.RentalManager.Express.Module.BusinessObjects.Common;
using System.Text;
using DevExpress.ExpressApp.DC;
using EDS.RentalManager.Express.Module.BusinessObjects;

namespace QuickZ.Persistent.BaseImpl
{
    [DevExpress.ExpressApp.DC.DomainComponent]
    [NavigationItem(false), CreatableItem(true)]
    [DevExpress.ExpressApp.DC.XafDefaultProperty(nameof(DocumentName))]
    [ImageName("BOBusinessDocumentData")]    
    [DevExpress.ExpressApp.DC.XafDisplayName("File Attachments")]
    [FileAttachment("File")]
    //[MapInheritance(MapInheritanceType.ParentTable)]
    public partial class BusinessDocumentFile : RMXQuickAuditBaseObject, IBusinessDocument, IBusinessDocumentFile, ITagAsSystemObject, ILocationPrivacyObject
    {
        RMXLocationCategory ILocationPrivacyObject.Location => (this.HomeLocation);

        private string _Description;
        [Size(256)]
        public string Description
        {
            get
            {
                return _Description;
            }
            set
            {
                SetPropertyValue(nameof(Description), ref _Description, value);
            }
        }

        string fileNameAsAttachment;
        [Size(128)]
        // --- This Filename will appear on the Send Email dialog's Attachment List
        public string FileNameAsAttachment
        {
            get
            {
                return fileNameAsAttachment;
            }
            set
            {
                SetPropertyValue(nameof(FileNameAsAttachment), ref fileNameAsAttachment, value);
            }
        }

        public string Extension
        {
            get
            {
                if (File == null)
                    return "File now found";
                return File.ExtName;
            }
        }

        private bool _ShowAsInplaceDocument;
        public bool ShowAsInplaceDocument
        {
            get
            {
                return _ShowAsInplaceDocument;
            }
            set
            {
                SetPropertyValue(nameof(ShowAsInplaceDocument), ref _ShowAsInplaceDocument, value);
            }
        }

        private string _DocumentName;
        [Size(128)]
        public string DocumentName
        {
            get
            {
                return _DocumentName;
            }
            set
            {
                SetPropertyValue(nameof(DocumentName), ref _DocumentName, value);
            }
        }

        DocumentContentType IBusinessDocument.DocumentType
        {
            get
            {
                return DocumentContentType.FileAttachment;
            }
        }

        private DocumentContentFormat _DocumentFormat;
        public DocumentContentFormat DocumentFormat
        {
            get
            {
                return _DocumentFormat;
            }
            set
            {
                SetPropertyValue(nameof(DocumentFormat), ref _DocumentFormat, value);
            }
        }

        private bool _IsSignatureRequired;
        public bool IsSignatureRequired
        {
            get
            {
                return _IsSignatureRequired;
            }
            set
            {
                SetPropertyValue(nameof(IsSignatureRequired), ref _IsSignatureRequired, value);
            }
        }
        [FileTypeFilter("Document files", 1, "*.pdf")]
        [ExpandObjectMembers(ExpandObjectMembers.Never), ImmediatePostData]
        public BusinessFileData File
        {
            get { return GetPropertyValue<BusinessFileData>(nameof(File)); }
            set { SetPropertyValue<BusinessFileData>(nameof(File), value); }
        }

        string IBusinessDocumentFile.FileName
        {
            get
            {
                if (File == null)
                    return "File not found";
                return File.FileName;
            }
        }

        string IBusinessDocumentFile.Extension
        {
            get
            {
                return Extension;
            }
        }

        byte[] IBusinessDocumentFile.Content
        {
            get
            {
                if (File == null)
                    return Encoding.ASCII.GetBytes("");
                return File.Content;
            }

            set
            {
                File.Content = value;
            }
        }
    }
}
